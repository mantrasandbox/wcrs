name: CI - Build Test Backend Services

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      #paths:
      # - services/backend/** # Trigger only when backend files change

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKER_HUB_REPO_PREFIX: mantrasandbox/  # Change this

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed to get the previous commit for comparison

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            services/backend/**

      - name: Identify changed services
        id: changed-services
        run: |
          # Get unique service directories that contain changes
          CHANGED_SERVICES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | \
            grep -o 'services/backend/[^/]*' | \
            sort | uniq)
          
          # Convert to compact JSON array
          JSON_ARRAY=$(printf '%s\n' "$CHANGED_SERVICES" | jq -R . | jq -s -c .)
          echo "changed_services=${JSON_ARRAY}" >> $GITHUB_OUTPUT
          echo "Changed services: ${JSON_ARRAY}"

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            */target/**
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build changed Maven projects
        run: |
          echo "Changed services: ${{ steps.changed-services.outputs.changed_services }}"
          echo '${{ steps.changed-services.outputs.changed_services }}' | jq -r '.[]' | while read -r service_dir; do
            if [ -f "$service_dir/pom.xml" ]; then
              echo "Building project in $service_dir..."
              mvn -B package --file "$service_dir/pom.xml" -Dmaven.test.skip=true -Dmaven.repo.local=$HOME/.m2/repository
            else
              echo "No pom.xml found in $service_dir"
            fi
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:master
          buildkitd-config: |
            [worker.oci]
              enabled = true
              max-parallelism = 4
            [worker.containerd]
              enabled = false

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Build and push changed Docker images
        run: |
          # First prepare Maven cache
          mkdir -p .m2-cache
          cp -r ~/.m2/repository .m2-cache/
          
          echo '${{ steps.changed-services.outputs.changed_services }}' | jq -r '.[]' | while read -r service_dir; do
            service_name=$(basename "$service_dir")
            jar_file=$(find "$service_dir/target" -name "*.jar" ! -name "*original*" | head -n 1)
          
            if [ -f "$jar_file" ]; then
              echo "Building Docker image for $service_name..."
              docker buildx build \
                --push \
                --tag "${{ env.DOCKER_HUB_REPO_PREFIX }}$service_name:latest" \
                --cache-to type=local,dest=/tmp/.buildx-cache \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --build-arg JAR_FILE=$(basename "$jar_file") \
                --build-context maven-cache=./.m2-cache \
                -f "$service_dir/Dockerfile" \
                "$service_dir"
            else
              echo "No jar file found for $service_name in $service_dir/target/"
            fi
          done