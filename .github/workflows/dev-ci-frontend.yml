name: CI - Build Frontend Services

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - services/frontend/** # Trigger only when frontend files change

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKER_HUB_REPO_PREFIX: mantrasandbox/  # Private Docker Hub repository
  REPO_LOCATION: services/frontend/

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.find-services.outputs.services }}
      changed_services: ${{ steps.find-changed-services.outputs.changed_services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 2  # Needed to compare changes
          sparse-checkout: |
            /${{ env.REPO_LOCATION }}
          sparse-checkout-cone-mode: false
          skip-checks: true

      - name: Find frontend services
        id: find-services
        run: |
          # Find all directories in services containing package.json
          if [ -d "${{ env.REPO_LOCATION }}" ]; then
            SERVICES=$(find ${{ env.REPO_LOCATION }} -mindepth 2 -maxdepth 2 -name package.json -exec dirname {} \; | xargs -n1 basename)
            if [ -z "$SERVICES" ]; then
              echo "No frontend services found"
              echo "services=[]" >> $GITHUB_OUTPUT
            else
              echo "Found services:"
              echo "$SERVICES"
              # Convert to JSON array format
              JSON_SERVICES=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
              echo "services=$JSON_SERVICES" >> $GITHUB_OUTPUT
            fi
          else
            echo "frontend directory not found"
            echo "services=[]" >> $GITHUB_OUTPUT
          fi

      - name: Find changed services
        id: find-changed-services
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- ${{ env.REPO_LOCATION }})
          
          # Get all services
          SERVICES=$(find ${{ env.REPO_LOCATION }} -mindepth 2 -maxdepth 2 -name package.json -exec dirname {} \; | xargs -n1 basename)
          
          CHANGED_SERVICES=""
          for service in $SERVICES; do
            if echo "$CHANGED_FILES" | grep -q "^${{ env.REPO_LOCATION }}$service/"; then
              CHANGED_SERVICES="$CHANGED_SERVICES$service"$'\n'
            fi
          done
          
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No changed services found"
            echo "changed_services=[]" >> $GITHUB_OUTPUT
          else
            echo "Changed services:"
            echo "$CHANGED_SERVICES"
            # Convert to JSON array format
            JSON_CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "changed_services=$JSON_CHANGED_SERVICES" >> $GITHUB_OUTPUT
          fi

  build-frontend:
    needs: discover # First Discover all the services before proceeding to build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.discover.outputs.changed_services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            /${{ env.REPO_LOCATION }}
          sparse-checkout-cone-mode: false
          skip-checks: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: ${{ env.REPO_LOCATION }}${{ matrix.service }}/package-lock.json
          node-version: '18'
          cache: npm

      - name: Install dependencies
        run: |
          cd ${{ env.REPO_LOCATION }}${{ matrix.service }}
          npm ci

      - name: Build production bundle
        run: |
          cd ${{ env.REPO_LOCATION }}${{ matrix.service }}
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Build and push frontend Docker image
        run: |
          cd ${{ env.REPO_LOCATION }}${{ matrix.service }}
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t "${{ env.DOCKER_HUB_REPO_PREFIX }}${{ matrix.service }}:latest" \
            --build-arg SERVICE_NAME=${{ matrix.service }} \
            .