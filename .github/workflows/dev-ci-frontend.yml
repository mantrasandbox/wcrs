name: CI - Build Frontend Services

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      #- main
    #paths:
      #- 'frontend/**' # Trigger only when frontend files change

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKER_HUB_REPO_PREFIX: mantrasandbox/  # Change this
  REPO_LOCATION: /services/frontend/

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.find-services.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          sparse-checkout: |
             ${{ env.REPO_LOCATION }}             
          sparse-checkout-cone-mode: false
          skip-checks: true
          
      - name: Find frontend services
        id: find-services
        run: |
          # Find all directories in services containing package.json
          if [ -d "services/frontend" ]; then
            SERVICES=$(find services/frontend -mindepth 2 -maxdepth 2 -name package.json -exec dirname {} \; | xargs -n1 basename)
            if [ -z "$SERVICES" ]; then
              echo "No frontend services found"
              echo "services=[]" >> $GITHUB_OUTPUT
            else
              echo "Found services:"
              echo "$SERVICES"
              # Convert to JSON array format
              JSON_SERVICES=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
              echo "services=$JSON_SERVICES" >> $GITHUB_OUTPUT
            fi
          else
            echo "frontend directory not found"
            echo "services=[]" >> $GITHUB_OUTPUT
          fi
          
  build-frontend:
    needs: discover # First Discover all the services before proceeding to build
    #if: ${{ fromJSON(needs.discover.outputs.services) != [] }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Automatically discover frontend services
        # This finds all directories in frontend/ containing package.json
        service: ${{ fromJSON(needs.discover.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.REPO_LOCATION }}  
          sparse-checkout-cone-mode: false
          skip-checks: true
          
      - name: Verify checkout
        run: |
          pwd
          ls -la          # Debug: list checked out files
          cd services
          ls -la
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: ${{ env.REPO_LOCATION }}${{ matrix.service }}/package-lock.json
          node-version: '18'
          cache: npm  # or 'npm' 'yarn' depending on your package manager

      - name: Install dependencies
        run: |
          cd ${{ env.REPO_LOCATION }}${{ matrix.service }}
          npm ci # or yarn install --frozen-lockfile

      - name: Run tests
        run: |
          cd frontend/${{ matrix.service }}
          npm test -- --watchAll=false

      - name: Build production bundle
        run: |
          cd frontend/${{ matrix.service }}
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Build and push frontend Docker image
        run: |
          cd frontend/${{ matrix.service }}
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t "${{ env.DOCKER_HUB_REPO_PREFIX }}${{ matrix.service }}:latest" \
            --build-arg SERVICE_NAME=${{ matrix.service }} \
            .


