services:

  postgres:
    container_name: wcrs-db
    image: postgres
    environment:
      POSTGRES_USER: wcrs
      POSTGRES_PASSWORD: wcrs
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/data/postgres
      - ./init-scripts:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    networks:
      - wcrs-net
    restart: unless-stopped

  debezium-connect:
    image: debezium/connect:2.6  # Latest stable Debezium version
    user: "1000"
    container_name: debezium-connect
    networks:
      - wcrs-net
      - kafka-net
    ports:
      - "8083:8083"  # Kafka Connect REST API
    environment:
      BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      REST_ADVERTISED_HOST_NAME: connect
      REST_PORT: 8083
      PLUGIN_PATH: /kafka/connect/debezium-connector-mysql,/kafka/connect/debezium-connector-postgres
    depends_on:
      - kafka-ui
      - postgres
#    volumes:
#      - ./debezium/:/kafka/connectors/
#    entrypoint: [ "/bin/bash", "-c", "
#        # Make all scripts executable
#
#    " ]

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 80:80
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - postgres

  kafka1:
    image: apache/kafka
    hostname: kafka1
    ports:
      - "9092:9092"
    networks:
      - kafka-net
      - wcrs-net
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9091,2@kafka2:9091,3@kafka3:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    restart: unless-stopped

  kafka2:
    image: apache/kafka
    hostname: kafka2
    ports:
      - "9093:9092"
    networks:
      - kafka-net
      - wcrs-net
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9093,DOCKER://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9091,2@kafka2:9091,3@kafka3:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    restart: unless-stopped

  kafka3:
    image: apache/kafka
    hostname: kafka3
    ports:
      - "9094:9092"
    networks:
      - kafka-net
      - wcrs-net
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9094,DOCKER://kafka3:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9091,2@kafka2:9091,3@kafka3:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    restart: unless-stopped

  kafka-topics-creator:
    build:
       context: .
       dockerfile: Dockerfile.kafka
    hostname: kafka-topics-creator
    ports:
      - "9095:9092"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - postgres
    networks:
      - kafka-net
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-topics-creator:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

    volumes:
    - ./kafka-topics/topics.yaml:/topics.yaml
    entrypoint: ["/bin/bash", "-c","/create-topics.sh"]
#    entrypoint: ["/bin/bash", "-c",
#      "/create-topics.sh && \
#
#      /inventory-postgres-connector.sh && \
#
#      /rights-granter.sh "
#    ]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    networks:
      - kafka-net
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9093,kafka2:9093,kafka3:9093
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: unless-stopped

  rabbitMq:
    container_name: rabbitMq
    image: rabbitmq:3.9.11-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - kafka-net
      - wcrs-net
    restart: unless-stopped

  configserver:
    container_name: config-server
    image: mantrasandbox/config-server
    ports:
      - 8888:8888
    networks:
      - wcrs-net
    restart: unless-stopped

  api-gateway:
    container_name: api-gateway
    image: mantrasandbox/api-gateway
    ports:
      - 4040:4040
    networks:
      - wcrs-net
      - wcrs-logging
    restart: unless-stopped
    depends_on:
      - configserver


  employee:
    container_name: employee
    image: mantrasandbox/employee
    ports:
      - 4000:4000
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - configserver
      - postgres
      - kafka-ui
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9093,kafka2:9093,kafka3:9093"

  notification:
    container_name: notification
    image: mantrasandbox/notification
    ports:
      - 4001:4001
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - configserver
      - postgres
      - kafka-ui
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9093,kafka2:9093,kafka3:9093"

  inventory:
    container_name: inventory
    image: mantrasandbox/inventory
    ports:
      - 4002:4002
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - configserver
      - postgres
      - kafka-ui
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9093,kafka2:9093,kafka3:9093"

  recipe:
    container_name: recipe
    image: mantrasandbox/recipe
    ports:
      - 4003:4003
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - configserver
      - postgres
      - kafka-ui
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9093,kafka2:9093,kafka3:9093"

  employee-ui:
    container_name: employee-ui
    image: mantrasandbox/employee-ui
    ports:
      - 3000:3000
    networks:
      - wcrs-net
    restart: unless-stopped
    depends_on:
      - employee

  admin:
    container_name: admin
    image: mantrasandbox/wcrs-admin
    ports:
      - 9090:9090
    networks:
      - wcrs-net
    restart: unless-stopped

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.12.2
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - 5000:5000
      - 9600:9600
    networks:
      - wcrs-net
      - wcrs-logging
    restart: unless-stopped
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    networks:
      - wcrs-logging
    restart: unless-stopped

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.12.2
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - wcrs-logging
    restart: unless-stopped
    depends_on:
      - elasticsearch


networks:
  wcrs-net:
    driver: bridge
  wcrs-logging:
    driver: bridge
  kafka-net:
    driver: bridge

volumes:
  postgres:
  es_data:
  pgadmin:
